.TH log4cpp::Category 3 "5 Dec 2000" "log4cpp" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4cpp::Category \- This is the central class in the log4j package. 
.SH SYNOPSIS
.br
.PP
\fC#include <Category.hh>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "virtual \fB~Category\fR ()"
.br
.ti -1c
.RI "const string& \fBgetName\fR () const"
.br
.RI "\fIReturn the category name.\fR"
.ti -1c
.RI "void \fBsetPriority\fR (int priority)"
.br
.RI "\fISet the priority of this \fBCategory\fR.\fR"
.ti -1c
.RI "int \fBgetPriority\fR () const"
.br
.RI "\fIReturns the assigned \fBPriority\fR, if any, for this \fBCategory\fR.\fR"
.ti -1c
.RI "int \fBgetChainedPriority\fR () const"
.br
.RI "\fIStarting from this \fBCategory\fR, search the category hierarchy for a set priority and return it.\fR"
.ti -1c
.RI "bool \fBisPriorityEnabled\fR (int priority) const"
.br
.RI "\fIReturns true if the \fBCategory\fR has set a priority.\fR"
.ti -1c
.RI "void \fBsetAppender\fR (\fBAppender\fR* appender)"
.br
.RI "\fISets an \fBAppender\fR for this \fBCategory\fR.\fR"
.ti -1c
.RI "void \fBsetAppender\fR (\fBAppender\fR& appender)"
.br
.RI "\fISets an \fBAppender\fR for this \fBCategory\fR.\fR"
.ti -1c
.RI "\fBAppender\fR* \fBgetAppender\fR () const"
.br
.RI "\fIReturns the \fBAppender\fR for this \fBCategory\fR, or NULL if no \fBAppender\fR has been set.\fR"
.ti -1c
.RI "bool \fBownsAppender\fR () const"
.br
.RI "\fIReturns true if the \fBCategory\fR owns the \fBAppender\fR.\fR"
.ti -1c
.RI "void \fBcallAppenders\fR (const \fBLoggingEvent\fR& event)"
.br
.RI "\fICall the appenders in the hierrachy starting at \fCthis\fR.\fR"
.ti -1c
.RI "void \fBsetAdditivity\fR (bool additivity)"
.br
.RI "\fISet the additivity flag for this \fBCategory\fR instance.\fR"
.ti -1c
.RI "bool \fBgetAdditivity\fR () const"
.br
.RI "\fIReturns the additivity flag for this \fBCategory\fR instance.\fR"
.ti -1c
.RI "void \fBlog\fR (int priority, const char* stringFormat, ...)"
.br
.RI "\fILog a message with the specified priority.\fR"
.ti -1c
.RI "void \fBlog\fR (int priority, const string& message)"
.br
.RI "\fILog a message with the specified priority.\fR"
.ti -1c
.RI "void \fBdebug\fR (const char* stringFormat, ...)"
.br
.RI "\fILog a message with debug priority.\fR"
.ti -1c
.RI "void \fBdebug\fR (const string& message)"
.br
.RI "\fILog a message with debug priority.\fR"
.ti -1c
.RI "bool \fBisDebugEnabled\fR () const"
.br
.ti -1c
.RI "void \fBinfo\fR (const char* stringFormat, ...)"
.br
.RI "\fILog a message with info priority.\fR"
.ti -1c
.RI "void \fBinfo\fR (const string& message)"
.br
.RI "\fILog a message with info priority.\fR"
.ti -1c
.RI "bool \fBisInfoEnabled\fR () const"
.br
.ti -1c
.RI "void \fBwarn\fR (const char* stringFormat, ...)"
.br
.RI "\fILog a message with warn priority.\fR"
.ti -1c
.RI "void \fBwarn\fR (const string& message)"
.br
.RI "\fILog a message with warn priority.\fR"
.ti -1c
.RI "bool \fBisWarnEnabled\fR () const"
.br
.ti -1c
.RI "void \fBerror\fR (const char* stringFormat, ...)"
.br
.RI "\fILog a message with error priority.\fR"
.ti -1c
.RI "void \fBerror\fR (const string& message)"
.br
.RI "\fILog a message with error priority.\fR"
.ti -1c
.RI "bool \fBisErrorEnabled\fR () const"
.br
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "Category& \fBgetRoot\fR ()"
.br
.RI "\fIReturn the root of the \fBCategory\fR hierarchy.\fR"
.ti -1c
.RI "void \fBsetRootPriority\fR (int priority)"
.br
.RI "\fISet the priority of the root \fBCategory\fR.\fR"
.ti -1c
.RI "int \fBgetRootPriority\fR ()"
.br
.RI "\fIGet the priority of the \fCroot\fR \fBCategory\fR.\fR"
.ti -1c
.RI "Category& \fBgetInstance\fR (const string& name)"
.br
.RI "\fIInstantiate a \fBCategory\fR with name \fCname\fR.\fR"
.ti -1c
.RI "set<Category*>* \fBgetCurrentCategories\fR ()"
.br
.RI "\fIReturns all the currently defined categories as a set of \fBCategory\fR pointers.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "Category* \fBgetParent\fR ()"
.br
.RI "\fIReturns the parent category of this category, or NULL if the category is the root category.\fR"
.ti -1c
.RI "const Category* \fBgetParent\fR () const"
.br
.RI "\fIReturns the parent category of this category, or NULL if the category is the root category.\fR"
.ti -1c
.RI "void \fB_logUnconditionally\fR (int priority, const char* format, va_list arguments)"
.br
.ti -1c
.RI "void \fB_logUnconditionally2\fR (int priority, const string& message)"
.br
.RI "\fIUnconditionally log a message with the specified priority.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBHierarchyMaintainer\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This is the central class in the log4j package.
.PP
One of the distintive features of log4j (and hence \fBlog4cpp\fR) are hierarchal categories and  their evaluation. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS virtual log4cpp::Category::~Category ()\fC [virtual]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void log4cpp::Category::_logUnconditionally (int priority, const char * format, va_list arguments)\fC [protected]\fR
.PP
.SS void log4cpp::Category::_logUnconditionally2 (int priority, const string & message)\fC [protected]\fR
.PP
Unconditionally log a message with the specified priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIpriority\fR\fR The priority of this log message. 
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::callAppenders (const \fBLoggingEvent\fR & event)
.PP
Call the appenders in the hierrachy starting at \fCthis\fR.
.PP
If no appenders could be found, emit a warning.
.PP
This method always calls all the appenders inherited form the hierracy circumventing any evaluation of whether to log or not to log the particular log request.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fILoggingEvent\fR\fR the event to log. 
.SS void log4cpp::Category::debug (const string & message)
.PP
Log a message with debug priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::debug (const char * stringFormat, ...)
.PP
Log a message with debug priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIstringFormat\fR\fR Format specifier for the string to write  in the log file. 
.TP
\fB\fI...\fR\fR The arguments for stringFormat 
.SS void log4cpp::Category::error (const string & message)
.PP
Log a message with error priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::error (const char * stringFormat, ...)
.PP
Log a message with error priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIstringFormat\fR\fR Format specifier for the string to write  in the log file. 
.TP
\fB\fI...\fR\fR The arguments for stringFormat 
.SS bool log4cpp::Category::getAdditivity () const\fC [inline]\fR
.PP
Returns the additivity flag for this \fBCategory\fR instance.
.PP
.SS \fBAppender\fR * log4cpp::Category::getAppender () const
.PP
Returns the \fBAppender\fR for this \fBCategory\fR, or NULL if no \fBAppender\fR has been set.
.PP
\fBReturns: \fR
.in +1c
 The \fBAppender\fR. 
.SS int log4cpp::Category::getChainedPriority () const
.PP
Starting from this \fBCategory\fR, search the category hierarchy for a set priority and return it.
.PP
Otherwise, return the priority  of the root category.
.PP
The \fBCategory\fR class is designed so that this method executes as quickly as possible. 
.SS set< Category *>* log4cpp::Category::getCurrentCategories ()\fC [static]\fR
.PP
Returns all the currently defined categories as a set of \fBCategory\fR pointers.
.PP
Note: this function does not pass ownership of the categories in the set to the caller, only the ownership of the set. However set<\fBCategory\fR&>* is not legal C++, so we can't follow the default ownership conventions.
.PP
Unlike in log4j, the root category \fIis\fR included  in the returned set. 
.SS Category & log4cpp::Category::getInstance (const string & name)\fC [static]\fR
.PP
Instantiate a \fBCategory\fR with name \fCname\fR.
.PP
This method does not set priority of the category which is by default \fC\fBPriority::NOTSET\fR\fR.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIname\fR\fR The name of the category to retrieve. 
.SS const string & log4cpp::Category::getName () const\fC [inline]\fR
.PP
Return the category name.
.PP
\fBReturns: \fR
.in +1c
 The category name. 
.SS const Category * log4cpp::Category::getParent () const\fC [inline, protected]\fR
.PP
Returns the parent category of this category, or NULL if the category is the root category.
.PP
\fBReturns: \fR
.in +1c
 the parent category. 
.SS Category * log4cpp::Category::getParent ()\fC [inline, protected]\fR
.PP
Returns the parent category of this category, or NULL if the category is the root category.
.PP
\fBReturns: \fR
.in +1c
 the parent category. 
.SS int log4cpp::Category::getPriority () const
.PP
Returns the assigned \fBPriority\fR, if any, for this \fBCategory\fR.
.PP
\fBReturns: \fR
.in +1c
 \fBPriority\fR - the assigned \fBPriority\fR, can be \fBPriority::NOTSET\fR 
.SS Category & log4cpp::Category::getRoot ()\fC [static]\fR
.PP
Return the root of the \fBCategory\fR hierarchy.
.PP
.PP
The root category is always instantiated and available. It's name is the empty string.
.PP
Unlike in log4j, calling \fCCategory.getInstance("")\fR \fIdoes\fR retrieve the root category  and not a category just under root named "". 
.PP
\fBReturns: \fR
.in +1c
 The root category 
.SS int log4cpp::Category::getRootPriority ()\fC [static]\fR
.PP
Get the priority of the \fCroot\fR \fBCategory\fR.
.PP
\fBReturns: \fR
.in +1c
 the priority of the root category 
.SS void log4cpp::Category::info (const string & message)
.PP
Log a message with info priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::info (const char * stringFormat, ...)
.PP
Log a message with info priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIstringFormat\fR\fR Format specifier for the string to write  in the log file. 
.TP
\fB\fI...\fR\fR The arguments for stringFormat 
.SS bool log4cpp::Category::isDebugEnabled () const\fC [inline]\fR
.PP
.SS bool log4cpp::Category::isErrorEnabled () const\fC [inline]\fR
.PP
.SS bool log4cpp::Category::isInfoEnabled () const\fC [inline]\fR
.PP
.SS bool log4cpp::Category::isPriorityEnabled (int priority) const
.PP
Returns true if the \fBCategory\fR has set a priority.
.PP
\fBReturns: \fR
.in +1c
 whether a priority has been set. 
.SS bool log4cpp::Category::isWarnEnabled () const\fC [inline]\fR
.PP
.SS void log4cpp::Category::log (int priority, const string & message)
.PP
Log a message with the specified priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIpriority\fR\fR The priority of this log message. 
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::log (int priority, const char * stringFormat, ...)
.PP
Log a message with the specified priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIpriority\fR\fR The priority of this log message. 
.TP
\fB\fIstringFormat\fR\fR Format specifier for the string to write  in the log file. 
.TP
\fB\fI...\fR\fR The arguments for stringFormat 
.SS bool log4cpp::Category::ownsAppender () const
.PP
Returns true if the \fBCategory\fR owns the \fBAppender\fR.
.PP
In that case the \fBCategory\fR destructor will delete the \fBAppender\fR. 
.SS void log4cpp::Category::setAdditivity (bool additivity)
.PP
Set the additivity flag for this \fBCategory\fR instance.
.PP
.SS void log4cpp::Category::setAppender (\fBAppender\fR & appender)
.PP
Sets an \fBAppender\fR for this \fBCategory\fR.
.PP
This method does not pass ownership from the caller to the \fBCategory\fR. 
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIappender\fR\fR The \fBAppender\fR this category has to log to. 
.SS void log4cpp::Category::setAppender (\fBAppender\fR * appender)
.PP
Sets an \fBAppender\fR for this \fBCategory\fR.
.PP
This method passes ownership from the caller to the \fBCategory\fR. 
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIappender\fR\fR The \fBAppender\fR this category has to log to. 
.SS void log4cpp::Category::setPriority (int priority)
.PP
Set the priority of this \fBCategory\fR.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIpriority\fR\fR The priority to set. Use \fBPriority::NOTSET\fR to let  the category use its parents priority as effective priority. 
.SS void log4cpp::Category::setRootPriority (int priority)\fC [static]\fR
.PP
Set the priority of the root \fBCategory\fR.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIpriority\fR\fR The new priority for the root \fBCategory\fR 
.SS void log4cpp::Category::warn (const string & message)
.PP
Log a message with warn priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fImessage\fR\fR string to write in the log file 
.SS void log4cpp::Category::warn (const char * stringFormat, ...)
.PP
Log a message with warn priority.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIstringFormat\fR\fR Format specifier for the string to write  in the log file. 
.TP
\fB\fI...\fR\fR The arguments for stringFormat 
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class HierarchyMaintainer\fC [friend]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for log4cpp from the source code.